CREATE TABLE KDT_KOREA(
    articleNum number primary key,
    id varchar2 (300) not null, 
--    test char(10) : char은 고정 길이 
    writeDate date not null,
    contents blob not null 
--    contents clob not null // 4GB
)
--------------------------------------------------------------------------------
HR 계정의 LOCK을 푸는 명령어
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
DDL
DML : SELECT, INSERT, UPDATE, DELETE
DCL
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
1. SELECT : 테이블의 값을 읽어올 때 사용 
SELECT 컬럼명
FROM 테이블 또는 뷰
WHERE 조건절
GROUP BY 그룹핑
ORDER BY 정렬
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
SELECT *
FROM EMPLOYEES

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES  --FROM절 뒤에는 테이블 또는 뷰가 와야함
WHERE EMPLOYEE_ID = 110
/*EMPLOYEE_ID가 PRIMARY KEY임 : PK로 선언되어있는 컬럼에는 ENTITY 무결성 제약 조건이 있음
ENTITY 무결성 제약 조건 : 해당 컬럼에 NULL이 올 수 없고, 중복된 값이 올 수 없음*/
--------------------------------------------------------------------------------

SELECT 10*9 AS "RESULT"
FROM DUAL

SELECT 19*9 "연산 결과"
FROM DUAL

SELECT 10*3 연산결과 
FROM DUAL


SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 5000 AND 10000
-- BETWEEN a AND b : 반드시 a위치에 작은값이 와야하고 경계값을 포함함


--사원들의 LAST_NAME의 종류(갯수)를 출력하시오.
SELECT DISTINCT LAST_NAME
FROM EMPLOYEES
--DISTINCT : 중복 제거

--------------------------------------------------------------------------------
SELECT FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%a%'

SELECT FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_a%'

SELECT FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%a__'
--------------------------------------------------------------------------------

SELECT FIRST_NAME, LAST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '_a%'
ORDER BY FIRST_NAME DESC, LAST_NAME
--ASC:오름차순, 생략가능 <> DECS : 내림차순, 생략불가
--------------------------------------------------------------------------------

SELECT FIRST_NAME, LAST_NAME
FROM EMPLOYEES 
WHERE FIRST_NAME LIKE '%A%'

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY BETWEEN 3000 AND 8000
ORDER BY SALARY

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY SALARY

--------------------------------------------------------------------------------
SELECT FIRST_NAME, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT != NULL
-- 특정 컬럼의 데이터 값이 NULL인지를 체크할 때는 IS NULL, IS NOT NULL연산자를 사용 해야함

SELECT FIRST_NAME, COMMISSION_PCT
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL
--------------------------------------------------------------------------------
SELECT FIRST_NAME || '@'|| EMAIL
FROM EMPLOYEES

----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 *JOIN, SUBQUERY
 JOIN : 2개 이상의 테이블에서 데이터를 SELELCT 하는 것
 SUBQUERY : 퀴리문 안에 또 쿼리문이 있는것, 종류가 2개 있음
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT EMPLOYEES, FIRST_NAME, EMPLOYEES.SALASRY, departments.department_name
FROM EMPLOYEES, DEPARTMENTS
WHERE EMPLOYEES.EMPLOYEE_ID = 113
    AND employees.department_id = DEPARMENTS.DEPARTMENT_ID
--------------------------------------------------------------------------------
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM EMPLOYEE e, DEPARTMENTS d
WHERE FIRST_NAME LIKE '%A%'
    AND E.DEPARTMENT_ID = D.DEPARTMENT_ID
--------------------------------------------------------------------------------
--seattle(city)에서 근무하는 사원들의 이름을 모두 출력하시오
select e.first_name, l.city
from employees e, locations l, departments d
where e.department_id = d.department_id
    and d.location_id = l.location_id
    and l.city = 'Seattle'
--------------------------------------------------------------------------------
--8.부서위치가 toronto인 사원의 이름, 부서 이름 출력
select e.first_name, d.department_name
from employees e, departments d, locations l
where l.city = 'Toronto'
    and l.location_id = d. location_id
    and d.department_id = e.department_id
--------------------------------------------------------------------------------
--8-1. 8번 문제를 서브쿼리로 바꾼 쿼리문
select e.first_name, d.department_name
from employees e, departments d
where d.department_id = e.department_id
    and d.location_id = (select location_id
                        from locations
                        where city='Toronto')
--------------------------------------------------------------------------------
--9. Ernst(last_name)의 급여와 동일하거나 더 많이 받는 사원의 이름과 급여를 출력하시오.
select first_name, last_name, salary
from employees
where salary >= (select salary
                from employees
                where last_name='Ernst')
order by salary
--------------------------------------------------------------------------------
--self join으로 구현
select e1.first_name, e1.salary
from employees e, employees e1
where e.last_name='Ernst'
    and e.salary <= e1.salary
--------------------------------------------------------------------------------  
--사원번호가 118인 사원의 first_name과 사수(manager_id)의 first_name을 출력하시오(self join)
select e1.first_name as "사원이름" , e2.first_name as "사수이름"
from employees e1, employees e2
where e1.employee_id = 118
    and e1.manager_id = e2.employee_id
--------------------------------------------------------------------------------
--직급이 Accountant, Programmer가 아닌 사원들의 이름과 직급을 출력하시오
select e.first_name, j.job_title
from employees e, jobs j
where j.job_title != 'Accountant'
    and j.job_title != 'Programmer'
    and e.job_id = j.job_id
--------------------------------------------------------------------------------
select e.first_name, j.job_title
from employees e, jobs j
where e.job_id = j.job_id
    and job_title not in('Accountant','Programmer')  --p.249
--------------------------------------------------------------------------------
--부서 번호가 30인 부서에 근무하는 사원들의 이름(last_name)과 부서이름, 부서위치(city),
--직급(job_title)을 출력하시오
select e.last_name, d.department_name, l.city, j.job_title, d.department_id
from employees e, departments d, locations l, jobs j
where e.department_id = 30
    and e.department_id = d.department_id
    and l.location_id = d.location_id
    and e.job_id = j.job_id
--확인    
select count(*) 
from employees
where department_id=30
--------------------------------------------------------------------------------
--커미션을 받는 사원의 이름과 부서이름을 출력하시오
select e.first_name, d.department_name
from employees e, departments d
where commission_pct is not null
    and e.department_id=d.department_id
--check
select count(*)
from employees
where commission_pct is not null
--------------------------------------------------------------------------------
--위의 쿼리문은 오류가 있음
--조인하는 컬럼에 null 값이 있는 경우 조인에서 제외됨으로 결과로 나오는 값에 문제가 있음

--*null
--    : null은 연산을 하면 null이 됨
--    : join시에 컬럼에 null이 있으면 제외됨
--------------------------------------------------------------------------------
--모든 사원의 이름과 각 사원의 사수의 이름을 출력하시오(OUTER JOIN)
select e1.first_name as "사원이름" , e2.first_name as "사수이름"
from employees e1, employees e2
where e1.manager_id = e2.employee_id(+)
--------------------------------------------------------------------------------
--커미션을 받는 사원의 이름과 부서이름을 출력하시오(OUTER JOIN)
select e.first_name, d.department_name
from employees e, departments d
where commission_pct is not null
    and e.department_id=d.department_id(+)
--check
select count(*)
from employees
where commission_pct is not null
--------------------------------------------------------------------------------
--급여가 5000이상 10000이하인 사원의 이름, 급여, 부서이름, 도시이름을 출력하시오
select e.first_name, e.salary, d.department_name, l.city
from employees e, departments d, locations l
where e.salary between 5000 and 10000
    and e.department_id = d.department_id(+)
    and d.location_id = l.location_id(+)
--------------------------------------------------------------------------------    
--------------------------------------------------------------------------------
--각 사원들의 연봉을 출력하시오 (연봉 : 월급*12+커미션*월급*12)
select first_name, salary*12+salary*nvl(commission_pct,0)*12 as "연봉"
from employees
--nvl(colume, 0) : null을 0으로 변환시킨다 
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--INSERT문 사용법----------------------------------------------------------------
INSERT INTO 테이블(컬럼명, 컬럼명, ···) VALUES(컬럼명, 컬럼명, ···)

INSERT INTO EMPLOYEES VALUES (300,'FFF','OOP','FASF','010.444.555',sysdate,
                                'SA_MAN',5000,NULL,151,180)

INSERT INTO EMPLOYEES VALUES (3088,'FeF','OOP','FAsss','010.555.555',sysdate,
                                'SA_MAN',5000,NULL,151,180)

ROLLBACK 
-- : 커밋한 이후의 모든 쿼리 취소
COMMIT
-- : 커밋 실행하면 전의 것들은 롤백 불가
-- : 커밋하기 전에는 임시 테이블에만 적용, 커밋하면 진짜로 테이블 변환됨
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--UPDATE------------------------------------------------------------------------
update 테이블명
set 컬럼명 = 값, . . . 
where 조건

update employees 
set first_name = '09000', last_name = 'djkslf'
where employee_id = 3088
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--DELETE------------------------------------------------------------------------
DELETE 
FROM 테이블명
WHERE --조건절 없으면 테이블의 모든 것이 삭제 됨

delete 
from employees
where employee_id = 3088
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
함수 사용법
1. 그룹 함수
    select sum(salary)
    from employees
    
    select avg(salary)
    from employees

    select max(salary)
    from employees
    
    select min(salary)
    from employees

    select count(salary)
    from employees

--각 부서의 부서번호와 해당 부서의 월급의 합을 구해라
select department_id, sum(salary)
from employees
group by department_id --select문에 그룹함수가 있으면 그룹핑을 해줘야 함
--------------------------------------------------------------------------------
--30번부서의 부서번호와 해당 부서의 월급을 합을 구하라
--group by 절을 사용할 때 조건은 having절로 구한다----------------------------------
select department_id, sum(salary)
from employees
having department_id = 30
group by department_id
--------------------------------------------------------------------------------
select department_id, sum(salary)
from employees
group by department_id
order by department_id desc
--------------------------------------------------------------------------------
--문자열 처리 함수----------------------------------------------------------------
select lower(first_name) --upper()
from employees

select first_name
from employees
where lower(first_name) like'%o%';

select concat(concat(first_name,'@'), last_name) as human
from employees

select initcap(email)
from employees

select first_name, substr(first_name, 3)
from employees

select first_name, substr(first_name, 3,2)
from employees

select first_name, concat(first_name, job_id), length(first_name)
from employees
where substr(job_id,1,5) = 'AD_VP'

select first_name, instr(first_name,'s')
from employees

select rtrim(ltrim('human')) as "A"
from dual      

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--숫자 함수----------------------------------------------------------------------
--반올림
select round(45.115, 2), round(45.611, 0), round(45.111, -1)
from dual
--버림
select trunc(45.115,2), trunc(45.611,0), trunc(45.111,-1)
from dual
--나머지
select first_name, salary, commission_pct, mod(salary, commission_pct)
from employees
where job_id = 'SA_MAN'

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--날짜 함수----------------------------------------------------------------------
select first_name, (sysdate-hire_date) as "근무일수"
from employees

select last_name, round((sysdate-hire_date),0),
        trunc((sysdate-hire_date)/365)||'년'||
        trunc(mod(sysdate-hire_date,365)/30)||'월'||
        trunc(mod(mod(sysdate-hire_date,365),30))||'일'
from employees

select months_between(sysdate,'2021-12-01') as 개월차이
from dual

select add_months(sysdate,3)
from dual

select next_day(sysdate,'수')
from dual

select last_day(sysdate)
from dual

select to_char(sysdate, 'YYYY"년" MM"월" DD"일"')
from dual
--------------------------------------------------------------------------------
SELECT TO_CHAR(SYSDATE, 'YYYY"년" MM"월" DD"일"') A
     , TO_CHAR(SYSDATE, 'YEAR') B -- 문자
     , TO_CHAR(SYSDATE, 'MONTH') C
     , TO_CHAR(SYSDATE, 'DY') D -- 요일 약어
     , TO_CHAR(SYSDATE, 'DAY') E -- 요일 전체
     , TO_CHAR(SYSDATE, 'MON','NLS_DATE_LANGUAGE=ENGLISH') F  
     , TO_CHAR(SYSDATE, 'MON') G 
FROM dual;
      
select first_name, salary+nvl(commission_pct, 0)
from employees

select first_name, commission_pct, nvl2(commission_pct,'영업','사무직')          
from employees

select concat(concat(first_name,' '), last_name) as NAME, salary,
                decode(job_id,
                        'IT_PROG', salary*0.10,
                        'ST_MAN', salary*0.15,
                        'SA_MAN', salary*0.20,
                        salary) as BONUS
from employees

select first_name, salary
        ,case
        when job_id='IT_PROG' then salary*0.10
        when job_id='ST_MAN' then salary*0.15
        when job_id='SA_MAN' then salary*0.20
        else salary
    end as bonus
from employees
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--ROWNUM 사용법------------------------------------------------------------------
--rownum이라는 가상의 컬럼은 select문이 수행된 결과값의 앞에 붙음
select rownum, first_name
from employees
--where rownum between 4 and 7 : employees테이블에 rownum이라는 컬럼이 없기 때문에 오류남
select rownum, first_name
from employees 
where rownum>=1 
--rownum = 1 을 포함하는 값을 오라클이 내부적으로 읽어올 수 있음

--      1.from 절에 인라인뷰를 사용해서 미리 rownum 값을 가져오면
        select rownum, first_name
        from (select rownum, employees.*
                from employees)
        where rownum between 4and 7
        --오류

--      2. rownum을 바로 사용하면 안되고 익명을 사용해야함
select rownum, first_name
from (select rownum as rm, employees.*
        from employees)
where rm between 4 and 7

--      3.first_name을 오름차순으로 정렬했을 때 4~7번째 사원의 이름을 알아보자
select first_name
from employees
order by first_name     --4~7 : Alexander, Alexander, Alexis, Allan

select *
from (select rownum as rm, emp.*
        from (select * 
                from employees
                order by first_name) emp
        )
where rm between 4 and 7